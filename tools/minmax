#!/usr/bin/python
from numpy import *
import sys

verbose = False  # no verbosity
D       = -1     # dimensionality needs to be specified
N       = -1     # grid size equals sample size
outfile = []     # use input data file as basename for outpur
rndflag = False  # use minmax
cosflag = True   # use cosine distance 

if len(sys.argv) < 2:
  print "usage: minmax -d dim [-n N] [-o name] [-r] [-v] [-h] data"
  sys.exit("ERROR: no data file specified")
else:
  for i,s in enumerate(sys.argv):
    if   s == '-d'   : D       = int(sys.argv[i+1])
    if   s == '-n'   : N       = int(sys.argv[i+1])
    if   s == '-o'   : outfile = sys.argv[i+1]
    if   s == '-r'   : rndflag = True
    elif s == '-v'   : verbose = True
    elif s == '-h'   : 
      print """
usage: minmax -d dim [-n N] [-o name] [-r] [-v] [-h] data

 -d dim        : dimensionality

 -n N          : grid size [all]
 
 -o name       : filename of grid [filename of data]

 -v            : turn verbosity on [false]

 -r            : random selection of grid points [false]

 -h            : show this message
"""
      sys.exit()

print """ 
 ****************************************** 
 *                                        * 
 *               PAMM Tools               * 
 *                                        * 
 ****************************************** 
                                               
 grid creation based on:                    
   - minmax criterion (default)             
     or random points                       
   - cosine distance (default)              
     or euclidean distance                  
                                            
 Version: 1.0                               
 Date   : 03/08/17                          
 Author : robert.meissner@epfl.ch 
"""    

#######################################################################
###                                                                 ###
###                       function definitions                      ###
###                                                                 ###
#######################################################################


def mm(x,n=-1,verbose=False):
   "creates grid points using minmax criterion"
   # if n not set
   if n < 0: n = int(len(x)**(1.0/2.0))
   x = array(x)
   d = 1
   if (x.ndim > 1): d = x.shape[1]
   y = empty((n,d))
   idxs = []
   x.reshape(-1,d)
   
   dmin = array((len(x))*[float('inf')])
   
   # choosing a random point
   y[0,:] = x[random.randint(0,size(x,0)),:]
   for i in range(1,n):
     if verbose and ((i+1)%10 is 0): 
       print "minmax:  %s/%s" % (i+1,n)
     dx = linalg.norm(x-y[i-1,:],axis=1)
     dmin[dmin > dx] = dx[dmin > dx]
     iy = argmax(dmin)
     y[i,:] = x[iy,:]
     idxs.append(iy)
   return y,idxs

#######################################################################
###                                                                 ###
###                          input control                          ###
###                                                                 ###
#######################################################################

if D < 0: sys.exit("ERROR: no dimension specified")

try:
    with open(sys.argv[-1]) as file:
        pass
except IOError as e:
    print "ERROR: unable to open data file"
datafile = sys.argv[-1]

X = loadtxt(datafile)

if not outfile: outfile = datafile + '.idxs'

#######################################################################
###                                                                 ###
###                          main program                           ###
###                                                                 ###
#######################################################################

# check for duplicate entries and get only indexes of unique points
_,idxs = unique(map(str,X),return_index=True)

if N < 0: N = idxs.shape[0]
if N>idxs.shape[0]: sys.exit("ERROR: grid size too big")

if rndflag:
  if verbose: print "  selecting %d random points" % N
  random.shuffle(idxs)
  idxs = idxs[:N]
else:
  if verbose: print "  selecting %d points using minmax" % N
  _,idxs = mm(X,N,verbose)

#######################################################################
###                                                                 ###
###                       output of program                         ###
###                                                                 ###
#######################################################################  

savetxt(outfile,idxs,fmt='%d')
