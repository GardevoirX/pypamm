#!/usr/bin/env python
from numpy import *
from matplotlib import pyplot as P
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.spatial.distance import squareform
import scipy.sparse.csgraph as csg
import sys, os, argparse, time

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description="""
  ******************************************
  *                                        *
  *               PAMM Tools               *
  *                                        *
  *               Dendrogram               *
  *                                        *
  ******************************************

""")
parser.add_argument("adj", type=str, help="adjacency matrix")
parser.add_argument("-l", "--link", type=str, default='ward', help="linkage mode. see documentation of scipy.cluster.hierarchy.linkage (default=ward)")
parser.add_argument("-v", "--verbose", help="increase output verbosity.", action="store_true")

######### MAIN #########
def main():
  args = parser.parse_args()
  starttime = time.time()

  try:
    with open(args.adj) as file:
        pass
  except IOError as e:
    print "ERROR: Unable to open adjacency matrix"

  adj = loadtxt(args.adj)

  d = ones(adj.shape)*inf
  for i in range(adj.shape[0]):
    for j in range(adj.shape[1]):
      if adj[i,j] > 0: d[i,j] = -log(adj[i,j]/sqrt(adj[i,i]*adj[j,j]))    
  # distance definition makes diagonal entries zero
  fill_diagonal(d,0)

  # set furthest distance to max in distance matrix
  d[d==inf] = max(d.flatten()[d.flatten() != inf])

  # single is the only way this distance matrix can be interpreted
  Z = linkage(squareform(d),args.link)
  dendrogram(Z)
  P.show()

  return 0
####### END MAIN ########

if __name__ == "__main__":
    sys.exit(main())
