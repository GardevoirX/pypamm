#!/usr/bin/python
from numpy import *
import scipy.sparse.csgraph as csg
import sys, os, argparse, time

import pylab as P

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description="""
  ******************************************
  *                                        *
  *               PAMM Tools               *
  *                                        *
  *      Adjacency matrix claculation      *
  *                                        *
  ******************************************

""")
parser.add_argument("D", type=int, help="dimensionality")
parser.add_argument("grid", type=str, help="reference grid file")
parser.add_argument("bootstrap", type=str, help="bootstrap file")
parser.add_argument("-t", "--thresh", type=float, default=0.9, help="threshold to merge cluster using the flooding approach. (default=0.9)")
parser.add_argument("--nolog", help="do not use log probabilities.", action="store_false")

parser.add_argument("-v", "--verbose", help="increase output verbosity.", action="store_true")

######### MAIN #########
def main():
  args = parser.parse_args()
  starttime = time.time()

  try:
    with open(args.grid) as file:
        pass
  except IOError as e:
    print "ERROR: Unable to open grid file"
  try:
    with open(args.bootstrap) as file:
        pass
  except IOError as e:
      print "ERROR: Unable to open bootstrap file"

  grid = loadtxt(args.grid)
  clus = array(grid[:,args.D],dtype=int)-1
  prob = grid[:,args.D+1]
  boot = loadtxt(args.bootstrap,dtype=int)-1

  oname = os.path.splitext(args.grid)[0]

  # total number of grid points
  N = len(grid)
  # total number of cluster
  Nc = len(unique(clus))

  # merging step
  if args.verbose: print ' merging by flooding' 
  # run adjacency calculation
  adj,ic = adjacency(prob,clus,boot)
  # merge cluster
  macro = merge(adj,ic,args.thresh,N)
  # store adjacency matrix
  savetxt('%s.%s' % (oname,'adj'),adj,fmt="%f")

  if args.verbose: sys.stderr.write("Finished in %.2f seconds.\n"%(time.time()-starttime))
  return 0
####### END MAIN ########

def merge(adj,ic,thresh,N):
  Nc = len(adj)

  imacro = ones(N,dtype=int)*-1

  cij = adj > thresh
  cgraph=csg.csgraph_from_dense(cij, null_value=False)
  cc=csg.connected_components(cgraph)
  for i in xrange(cc[0]):
      for j in xrange(Nc):
          if cc[1][j] == i:
              imacro[ic[j]] = i
  return imacro
  
def adjacency(prob,clus,boot):
  uc = unique(clus)
  ncls = len(uc)
  nbs = len(boot)
  nclsbs = zeros(nbs,int)
  for bs in xrange(nbs):
    nclsbs[bs] = max(boot[bs])+1
  lcls = []
  Qi = zeros(ncls)
  for i in xrange(ncls):
    icls = where(clus == uc[i])[0]
    Qi[i] = exp(prob[icls]).sum()
    lcls.append(icls)
  QA = zeros((nbs,max(nclsbs)))
  for bs in xrange(nbs):
    for i in xrange(nclsbs[bs]):
      icls = where(boot[bs] == i)[0]
      QA[bs,i] = exp(prob[icls]).sum()
  QAi = zeros((nbs,max(nclsbs),ncls))
  for bs in xrange(nbs):
    for i in xrange(nclsbs[bs]):
      icls = where(boot[bs] == i)[0]
      for j in xrange(ncls):
        inter = intersect1d(icls, lcls[j])
        QAi[bs,i,j] = exp(prob[inter]).sum()
  nij = zeros((ncls,ncls))
  for i in xrange(ncls):
    for j in xrange(i+1):
      tij = 0
      for bs in xrange(nbs):
        for k in xrange(nclsbs[bs]):
          tij += QAi[bs,k,i] * QAi[bs,k,j] / (QA[bs,k])
      nij[i,j] = nij[j,i] = tij/nbs
  nij /= exp(prob).sum()
  Qi /= exp(prob).sum()
  nnij = nij/ sqrt(multiply.outer(Qi,Qi))
  return (nnij,lcls)
  
if __name__ == "__main__":
    sys.exit(main())

